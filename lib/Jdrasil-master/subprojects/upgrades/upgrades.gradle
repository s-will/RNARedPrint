/*
 * Copyright (c) 2016-present, Max Bannach, Sebastian Berndt, Thorsten Ehlers
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
 * associated documentation files (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge, publish, distribute,
 * sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or
 * substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
 * NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT
 * OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

plugins {
  id "de.undercouch.download" version "3.1.2" 
}

// where do we store upgrades
buildDir = new File(rootProject.projectDir, "build/upgrades")

ext {
  /* Sat4J */
  sat4jDomain = "http://download.forge.ow2.org/sat4j/"
  sat4jZip = "sat4j-core-v20130525.zip"

  /* ipasir */
  ipasirDir = "${projectDir}/ipasir/"
  classesDir = new File(rootProject.projectDir, "build/classes/main")
}

/** Obtain the SAT4J library and place it into the upgrades folder. */
task upgrade_sat4j {
  doLast {
    // download sat4j
    download {
      src sat4jDomain + sat4jZip
      dest buildDir
    }

    // Unpack it
    copy {
      from zipTree("${buildDir}/${sat4jZip}")
      into buildDir
    }

    // clean up
    delete {
      delete "${buildDir}/${sat4jZip}"
      delete "${buildDir}/org.sat4j.core-src.jar"
    }    
  }
}

/** Build the JNI C-interface for native SAT solver. */
task cinterface(type: Exec, description: "Building Jdrasil's C-interface (needed for native SAT solver support)") {
  commandLine "javah", "-jni",
  "-cp", classesDir,
  "-d", ipasirDir,
  "jdrasil.sat.NativeSATSolver"
}

/** 
 * Build the native ipasir solver interface.
 */
task upgrade_ipasir {
  doLast {
    // compile the library
    exec {
      workingDir ipasirDir
      commandLine "make"
    }
    // copy to upgrades folder
    copy {
      from ipasirDir
      into buildDir
      include "libjdrasil_sat_NativeSATSolver.dylib"
      include "libjdrasil_sat_NativeSATSolver.so"
    }
    // clean up
    delete {
      delete "${ipasirDir}/libjdrasil_sat_NativeSATSolver.dylib"
      delete "${ipasirDir}/libjdrasil_sat_NativeSATSolver.so"
    }
  }
}

/**
 * Build the glucose SAT solver
 */
task upgrade_glucose {
  doLast {

    // compile glucose
    exec {
      workingDir "${ipasirDir}/ipasirglucose/"
      commandLine "make"
    }

    upgrade_ipasir.execute()
  }
}

/**
 * Build the lingeling SAT solver
 */
task upgrade_lingeling {
  doLast {

    // compile lingeling
    exec {
      workingDir "${ipasirDir}/ipasirlingeling/"
      commandLine "make"
    }

    upgrade_ipasir.execute()
  }
}
